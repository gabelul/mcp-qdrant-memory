#!/usr/bin/env node

/**
 * Configuration Setup Utility for Claude Code Memory MCP Server
 * 
 * This utility helps users migrate to the new tiered configuration system
 * and sets up user-level configuration for seamless cross-project usage.
 */

import fs from 'fs';
import path from 'path';
import os from 'os';
import readline from 'readline';
import { fileURLToPath } from 'url';
import { getUserConfigDir, ensureUserConfigDir } from '../dist/config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Color codes for better terminal output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

/**
 * Console logging with colors
 */
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

/**
 * Create readline interface for user input
 */
function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

/**
 * Prompt user for input with default value
 */
function askQuestion(rl, question, defaultValue = '') {
  return new Promise((resolve) => {
    const prompt = defaultValue 
      ? `${question} (${colors.cyan}${defaultValue}${colors.reset}): `
      : `${question}: `;
    
    rl.question(prompt, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

/**
 * Check if a file exists and is readable
 */
function fileExists(filePath) {
  try {
    fs.accessSync(filePath, fs.constants.R_OK);
    return true;
  } catch {
    return false;
  }
}

/**
 * Load existing configuration from various sources
 */
function loadExistingConfig() {
  const possiblePaths = [
    path.join(process.cwd(), 'settings.txt'),
    path.join(__dirname, '../../settings.txt'),
    path.join(__dirname, '../../../settings.txt'),
    path.join(os.homedir(), 'settings.txt'),
    path.join(process.cwd(), '.env'),
    path.join(__dirname, '../../.env')
  ];

  for (const configPath of possiblePaths) {
    if (fileExists(configPath)) {
      try {
        const content = fs.readFileSync(configPath, 'utf8');
        const config = {};
        
        // Parse key=value pairs
        content.split('\n').forEach(line => {
          const cleanLine = line.trim();
          if (cleanLine && !cleanLine.startsWith('#')) {
            const [key, ...valueParts] = cleanLine.split('=');
            if (key && valueParts.length > 0) {
              config[key.trim()] = valueParts.join('=').trim();
            }
          }
        });
        
        if (Object.keys(config).length > 0) {
          log(`✅ Found existing configuration at: ${configPath}`, 'green');
          return { config, path: configPath };
        }
      } catch (error) {
        log(`⚠️ Could not read ${configPath}: ${error.message}`, 'yellow');
      }
    }
  }
  
  return null;
}

/**
 * Create configuration file content
 */
function createConfigContent(config) {
  return `# Claude Code Memory Solution - User-Level Configuration
# This file is automatically loaded by all MCP servers
# Generated by setup-config.js on ${new Date().toISOString()}

# === Embedding Provider Configuration ===
# Choose ONE embedding provider by uncommenting the appropriate section

# Option 1: Voyage AI (Recommended - 85% cost reduction vs OpenAI)
${config.EMBEDDING_PROVIDER === 'voyage' ? '' : '#'}VOYAGE_API_KEY=${config.VOYAGE_API_KEY || 'your_voyage_api_key_here'}
${config.EMBEDDING_PROVIDER === 'voyage' ? '' : '#'}EMBEDDING_PROVIDER=voyage
${config.EMBEDDING_PROVIDER === 'voyage' ? '' : '#'}EMBEDDING_MODEL=voyage-3-lite

# Option 2: OpenAI (comment out Voyage settings above to use this)
${config.EMBEDDING_PROVIDER !== 'voyage' ? '' : '#'}OPENAI_API_KEY=${config.OPENAI_API_KEY || 'your_openai_api_key_here'}
${config.OPENAI_BASE_URL ? '' : '#'}OPENAI_BASE_URL=${config.OPENAI_BASE_URL || 'https://api.openai.com/v1'}
${config.EMBEDDING_PROVIDER !== 'voyage' ? '' : '#'}EMBEDDING_PROVIDER=openai
${config.EMBEDDING_PROVIDER !== 'voyage' ? '' : '#'}EMBEDDING_MODEL=text-embedding-3-large

# === Chat Processing Configuration ===
CHAT_MODEL=${config.CHAT_MODEL || 'o3'}

# === Qdrant Vector Database Configuration ===
QDRANT_URL=${config.QDRANT_URL || 'http://localhost:6333'}
QDRANT_API_KEY=${config.QDRANT_API_KEY || ''}

# === Additional Settings ===
indexer_debug=${config.indexer_debug || 'false'}
indexer_verbose=${config.indexer_verbose || 'true'}
debounce_seconds=${config.debounce_seconds || '60'}
include_markdown=${config.include_markdown || 'true'}
include_tests=${config.include_tests || 'false'}
max_file_size=${config.max_file_size || '1048576'}
auto_start_service=${config.auto_start_service || 'false'}
`;
}

/**
 * Main setup function
 */
async function main() {
  console.clear();
  
  log('╔══════════════════════════════════════════════════╗', 'cyan');
  log('║           Claude Code Memory Configuration       ║', 'cyan');
  log('║              Setup & Migration Tool              ║', 'cyan');
  log('╚══════════════════════════════════════════════════╝', 'cyan');
  log('');
  
  log('🚀 Setting up tiered configuration system...', 'bold');
  log('');
  
  // Use the shared configuration utilities
  const platform = os.platform();
  const userConfigDir = getUserConfigDir();
  const userConfigFile = path.join(userConfigDir, 'settings.txt');
  
  log(`📍 Platform: ${platform}`, 'blue');
  log(`📁 User config directory: ${userConfigDir}`, 'blue');
  log(`⚙️  User config file: ${userConfigFile}`, 'blue');
  log('');
  
  // Check for existing configuration
  log('🔍 Checking for existing configuration...', 'yellow');
  const existingConfig = loadExistingConfig();
  
  if (existingConfig) {
    log(`   Found configuration with ${Object.keys(existingConfig.config).length} settings`, 'green');
    log(`   Source: ${existingConfig.path}`, 'green');
  } else {
    log('   No existing configuration found', 'yellow');
  }
  log('');
  
  // Check if user config already exists
  if (fileExists(userConfigFile)) {
    log('⚠️  User-level configuration already exists!', 'yellow');
    log(`   Location: ${userConfigFile}`, 'yellow');
    log('');
    
    const rl = createInterface();
    const overwrite = await askQuestion(rl, 'Do you want to overwrite it? (y/N)', 'N');
    
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      log('✅ Setup cancelled. Your existing configuration is preserved.', 'green');
      rl.close();
      return;
    }
    rl.close();
    log('');
  }
  
  // Gather configuration
  const rl = createInterface();
  const config = {};
  
  log('📝 Configuration Setup', 'bold');
  log('   (Press Enter to use default values shown in cyan)', 'cyan');
  log('');
  
  // Load defaults from existing config if available
  const defaults = existingConfig ? existingConfig.config : {};
  
  // Essential configuration
  log('🔑 Essential Configuration:', 'magenta');
  
  config.OPENAI_API_KEY = await askQuestion(rl, 
    '   OpenAI API Key', 
    defaults.OPENAI_API_KEY || 'your_openai_api_key_here'
  );
  
  config.OPENAI_BASE_URL = await askQuestion(rl, 
    '   OpenAI Base URL', 
    defaults.OPENAI_BASE_URL || 'https://api.openai.com/v1'
  );
  
  config.QDRANT_URL = await askQuestion(rl, 
    '   Qdrant Database URL', 
    defaults.QDRANT_URL || 'http://localhost:6333'
  );
  
  config.QDRANT_API_KEY = await askQuestion(rl, 
    '   Qdrant API Key (optional)', 
    defaults.QDRANT_API_KEY || ''
  );
  
  log('');
  log('🎯 Advanced Configuration:', 'magenta');
  
  // Embedding provider choice
  const embeddingProvider = await askQuestion(rl, 
    '   Embedding Provider (openai/voyage)', 
    defaults.EMBEDDING_PROVIDER || 'openai'
  );
  config.EMBEDDING_PROVIDER = embeddingProvider;
  
  if (embeddingProvider === 'voyage') {
    config.VOYAGE_API_KEY = await askQuestion(rl, 
      '   Voyage AI API Key', 
      defaults.VOYAGE_API_KEY || 'your_voyage_api_key_here'
    );
  }
  
  config.CHAT_MODEL = await askQuestion(rl, 
    '   Chat Model', 
    defaults.CHAT_MODEL || 'o3'
  );
  
  // Optional settings
  config.indexer_debug = await askQuestion(rl, 
    '   Enable debug logging (true/false)', 
    defaults.indexer_debug || 'false'
  );
  
  config.indexer_verbose = await askQuestion(rl, 
    '   Enable verbose logging (true/false)', 
    defaults.indexer_verbose || 'true'
  );
  
  rl.close();
  log('');
  
  // Create user config directory using shared utility
  log('📁 Creating user configuration directory...', 'yellow');
  try {
    ensureUserConfigDir();
    log(`   ✅ Directory ready: ${userConfigDir}`, 'green');
  } catch (error) {
    log(`   ❌ Failed to prepare directory: ${error.message}`, 'red');
    process.exit(1);
  }
  
  // Write configuration file
  log('📝 Writing user configuration...', 'yellow');
  try {
    const configContent = createConfigContent(config);
    fs.writeFileSync(userConfigFile, configContent, 'utf8');
    log(`   ✅ Configuration saved: ${userConfigFile}`, 'green');
  } catch (error) {
    log(`   ❌ Failed to write configuration: ${error.message}`, 'red');
    process.exit(1);
  }
  
  log('');
  log('🎉 Configuration setup complete!', 'bold');
  log('');
  log('📋 What happens now:', 'bold');
  log('   • All MCP servers will automatically use this configuration', 'green');
  log('   • No need to copy settings.txt to every project', 'green');
  log('   • Environment variables still take highest priority', 'green');
  log('   • Project-level settings.txt can override user-level config', 'green');
  log('');
  log('🧪 Testing the configuration:', 'bold');
  log('   Set DEBUG_CONFIG=true to see detailed loading info:', 'cyan');
  log('   export DEBUG_CONFIG=true', 'cyan');
  log('');
  log('📚 Configuration priority order:', 'bold');
  log('   1. Environment variables (highest)', 'cyan');
  log('   2. Project-level settings.txt/.env', 'cyan');
  log('   3. User-level config (what we just created)', 'cyan');
  log('   4. Global fallback (backward compatibility)', 'cyan');
  log('');
  log('✨ Your Claude Code Memory system is now ready!', 'green');
}

// Run the setup
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error('❌ Setup failed:', error.message);
    process.exit(1);
  });
}